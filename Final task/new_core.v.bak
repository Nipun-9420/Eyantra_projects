module sm_bot(    //  always double check bits whether no of bits assigned to variables are enough
	input clk,   //Clock
	
	input [2:0] adc_data,  // line sensor reading 
	input color_detected,  // color detection status
	
	input [258:0] path,      //Dijktra's algorithm path
	input path_decided,      // check whether path is calculated or not
	
	output [6:0] speed_a1_a , // speed of right motor 
	output [6:0] speed_a1_b , // speed of right motor
	output [6:0] speed_b1_a , // speed of left motor
	output [6:0] speed_b1_b , // speed of left motor
	
	
	output elctro,             // elctro magnet value
	output start_elctro,       //electro magnet detection value
	output elctro_R,           // electro magnet status
	
	output start_detecting,    //color detection value      
	output [2:0] Unit_at,			// * review code to remove unnecessary test cases
	
	output [6:0]s,           // start node output
	output [6:0]e,           //End node Output 
	
	output start_algo        // Start algorithm status
	
);

	// varialbles for speed
	reg [6:0] r_speed_a1_a = 0 ; // speed of right motor 
	reg [6:0] r_speed_a1_b = 0 ; // speed of right motor
	reg [6:0] r_speed_b1_a = 0 ; // speed of left motor
	reg [6:0] r_speed_b1_b = 0 ; // speed of left motor
	
	reg r_start_detecting ; // to signal uart controller to consider color detection valid
	 
	
	// for node_tasks 1 bit reg
	reg current_node_task ;
	
	// for units 3 bits regs
	reg [2:0] current_unit ;  // to indicate current node 
	reg [2:0] next_unit ;  // to indicate next node				
	reg [2:0] previous_unit ; // to indicate previous unit	
	
	// for current process to detect color or not to detect
	reg  current_process ; // 1 bit reg to indicate processes to be done	
	reg [1:0] detection_status ; // 2 bit reg to indicate color detection status		
	
	// for nodes 4 bits regs
	reg [3:0] current_node ;  // to indicate current node 
	reg [3:0] next_node ;  // to indicate next node	 		
	reg [3:0] previous_node ; // to indicate previous node
	
	//for actions and processes			
	reg [2:0] action_to_take  ;  // 3 bit  to hold the actions(turns) to take		
	
	// arrays
	reg [2:0] units_to_visit [6:0]	; // 3 bit array of 7 regs to hold the units to vist 
	reg [3:0] nodes_to_follow [4:0]	; // 4 bit array of 5 regs yo hold nodes to follow	
	
	// counters
	reg [3:0] sequence_no ;	// for nodes 
	reg [3:0] unit_no ; // for units 	
	
	// defining node_tasks to be carried out
	parameter nodes_to_decide = 1'b0;
	parameter node_follow = 1'b1;
	
	// defining states to use in the state machine logic
	parameter START = 3'b000;
	parameter W = 3'b001;
	parameter PP = 3'b010;
	parameter VG = 3'b011;
	parameter NG = 3'b100;
	parameter MT = 3'b101;
	parameter STOP = 3'b110; 
	
	// defining processes to be done at different units
	parameter	color_detection = 1'b0;
	parameter	go_to_next_unit = 1'b1;
	 
	//algorithm
	parameter   go_to_position   =
	parameter   round_path       =
	parameter   supply-pick_path =
	
	
	// defining color detections status
	parameter	to_detect = 2'b00;
	parameter	detecting= 2'b01;
	parameter	detected = 2'b10;
	parameter	not_detected = 2'b11;
	
	
	// defining actions to take at different node
	parameter	follow_line = 3'b000;
	parameter	turn_R = 3'b001;
	parameter	turn_R_arc = 3'b010;
	parameter	turn_L = 3'b011;
	parameter	turn_L_arc = 3'b100;
	parameter	turn_A = 3'b101;
	parameter	go_st = 3'b110;
	
// -----------------------------------------------initialization--------------------------------------------------------	
	initial
	begin
		
		// initializing node_task
		current_node_task = nodes_to_decide;
		
		// initializing unit
		current_unit = START;
		
		// initializing counters
		sequence_no = 0;
		unit_no = 0;
		
		// initializing color detecting signal
		r_start_detecting = 0;
		
		// initializing detection_status
		detection_status = not_detected;
	end
	
	
// defining tasks for line following and turning ---------------------------------------------------------------------------------------
 	task line_follow ();  // this is used to follow line
	begin
		// adac_data is 3 bit bus and the bits represent the sensors itself. '1' means line detected '0' otherwise
		case (adc_data)
							// MSB is left_sensor and LSB is right_sensor
			
			3'b001 :
			begin
				r_speed_a1_a = 60; //96 60 2 80
				r_speed_b1_a = 20; //15 15 5
				r_speed_a1_b = 0;
				r_speed_b1_b = 0;
			end
			
			3'b011 :
			begin
				r_speed_a1_a = 55; //90 50 3 70
				r_speed_b1_a = 25; //70 30 10
				r_speed_a1_b = 0;
				r_speed_b1_b = 0;
			end
			
			3'b010 :
			begin	
				r_speed_a1_a = 50; //85 30 50
				r_speed_b1_a = 50; //91 30 60
				r_speed_a1_b = 0;
				r_speed_b1_b = 0;
			end
			
			3'b110 :
			begin
				r_speed_a1_a = 25; //50 30 10
				r_speed_b1_a = 55; //91 50 3 70
				r_speed_a1_b = 0;
				r_speed_b1_b = 0;
			end
			
			3'b100 :
			begin
				r_speed_a1_a = 20; //15 15 5
				r_speed_b1_a = 60; //90 60 2 80
				r_speed_a1_b = 0;
				r_speed_b1_b = 0;
			end
			
			3'b111 : // node condition 
			begin
				r_speed_a1_a = 35; //35 35 0
				r_speed_b1_a = 35; //35 35 0
				r_speed_a1_b = 0;
				r_speed_b1_b = 0;
			end
			
			3'b000 : // node condition 
			begin
				r_speed_a1_a = 0; //35 35 0
				r_speed_b1_a = 0; //35 35 0
				r_speed_a1_b = 35;
				r_speed_b1_b = 35;
			end
			
		endcase
	end
	endtask
	
	task turn_right ();  // to turn right
		begin
		r_speed_a1_a = 68;
		r_speed_b1_a = 0;
		r_speed_a1_b = 0;
		r_speed_b1_b = 30; 
		end
	endtask
	
	task turn_right_arc ();  // to turn right arc * need to modify
		begin
		r_speed_a1_a = 68;
		r_speed_b1_a = 20;
		r_speed_a1_b = 0;
		r_speed_b1_b = 0; 
		end
	endtask
	
	task turn_left (); // to turn left
		begin
		r_speed_a1_a = 0;
		r_speed_b1_a = 68;
		r_speed_a1_b = 30;
		r_speed_b1_b = 0; 
		end
	endtask
	
	task turn_left_arc (); // to turn left arc * need to modify
		begin
		r_speed_a1_a = 20;
		r_speed_b1_a = 68;
		r_speed_a1_b = 0;
		r_speed_b1_b = 0; 
		end
	endtask
	
	task go_straight (); // to go straight speed should be as low as possible
		begin
		r_speed_a1_a = 60;
		r_speed_b1_a = 55;
		r_speed_a1_b = 0;
		r_speed_b1_b = 0;
		end
	endtask
	
	task turn_around (); 
		begin
		r_speed_a1_b = 65;
		r_speed_b1_a = 65;
		r_speed_a1_a = 0;
		r_speed_b1_b = 0; 
		end
	endtask
	
	always @(posedge clk)
	begin
	case(current_node_task)
	
	nodes_to_decide:
	begin
		// these conditions and checks are common for all units to start deetcting and end detecting 
		
		if(current_process == color_detection)
		begin
			case( detection_status)
				
				to_detect:
				begin
					r_start_detecting = 1;
				end
			
				detecting:
				begin
					r_start_detecting = 0;
					if (color_detected) 
					begin
						detection_status = detected;
					end
					else
					begin
						detection_status = not_detected;
					end
				end
			
			endcase
		end
		else
		begin
			r_start_detecting = 0;
		end
		
		case(current_unit) 
		
			START: // in this unit sequence of units to check is decided and node to follow for the same
			begin
				
				previous_unit = START;
				
				units_to_visit[0] = PP;
				units_to_visit[1] = VG;
				units_to_visit[2] = NG;
				units_to_visit[3] = MT;
				units_to_visit[4] = STOP;
									
				
		   	current_node_task = nodes_to_decide; 
				next_unit = units_to_visit[0];
				current_process = color_detection; 
				detection_status = to_detect;
				
			end
			
			PP:
			begin
				
				
			end
	end		
		
	//-------------------------------------------------------------------------------------------------------------------------------			
	
	
	
	node_follow:
	begin
		
		

		case(current_node) 
		
			wait_for_node:  // this case is when trvelling on path or arch between two nodes -----------------------------------
			begin
				case(action_to_take)
					
					follow_line:
					begin
						line_follow();
						if( adc_data == 3'b111) current_node =  next_node;
					end
					
					turn_R:
					begin
						turn_right();
						if (adc_data != 3'b111 &  adc_data != 3'b000) action_to_take = follow_line;
					end
					
					turn_R_arc:
					begin
						turn_right_arc();
						if (adc_data != 3'b111 &  adc_data != 3'b000) action_to_take = follow_line;
					end
					
					turn_L:
					begin
						turn_left();
						if (adc_data != 3'b111 &  adc_data != 3'b000) action_to_take = follow_line;
					end

					turn_L_arc:
					begin
						turn_left_arc();
						if (adc_data != 3'b111 &  adc_data != 3'b000) action_to_take = follow_line;
					end

							
					turn_A:
					begin
						turn_around();
						if ( adc_data == 3'b010) action_to_take = follow_line;
					end
					
					go_st:
					begin
						go_straight();
						if (adc_data != 3'b111 &  adc_data != 3'b000) action_to_take = follow_line;
					end
				endcase
			end
		endcase
	end
	
	
endmodule
